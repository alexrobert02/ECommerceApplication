@page "/productoverview"
@using ECommerceApplication.App.Contracts
@using ECommerceApplication.App.ViewModels
@using Microsoft.AspNetCore.Components.Web


<div class="products-content-container">
    @if (Products == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="product-container">
            @foreach (var prod in Products)
            {
                <div class="product-card" @onclick="() => NavigateToProductDetail(prod.ProductId)">
                    <img src="@prod.ImageUrl" alt="@prod.ProductName" class="product-image" />
                    <div class="product-details">
                        <h4 class="product-name">@prod.ProductName</h4>
                        <p class="product-price">$@prod.Price</p>
                        <button class="add-to-cart-button" @onclick:preventDefault @onclick:stopPropagation @onclick="() => AddToCart(prod)" disabled="@prod.IsAddingToCart">
                            @if (prod.IsAddingToCart)
                            {
                                <span class="adding-to-cart-text">Adding...</span>
                            }
                            else
                            {
                                <svg class="shopping-cart-icon" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 15a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0h8m-8 0-1-4m9 4a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-9-4h10l2-7H3m2 7L3 4m0 0-.792-3H1" />
                                </svg>
                                <span>Add to Cart</span>
                            }
                        </button>

                    </div>
                </div>
            }
        </div>
    }
</div>


@code {
    [Inject]
    public IProductDataService ProductDataService { get; set; }

    [Inject]
    public IOrderItemDataService OrderItemDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<ProductViewModel> Products { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Fetch all products initially
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        Products = (await ProductDataService.GetProductAsync()).ToList();
    }

    private async Task AddToCart(ProductViewModel product)
    {
        product.IsAddingToCart = true;

        await Task.Delay(1000);

        OrderItemViewModel orderItem = new OrderItemViewModel
            {
                ProductId = product.ProductId,
                Quantity = 1,
                PricePerUnit = product.Price
            };

        await AddOrderItemToCart(orderItem);

        product.IsAddingToCart = false;
    }

    private async Task AddOrderItemToCart(OrderItemViewModel orderItem)
    {
        var response = await OrderItemDataService.CreateOrderItemAsync(orderItem);

        if (response.IsSuccess)
        {
            Console.WriteLine("Product added to cart successfully!");
        }
        else
        {
            Console.WriteLine($"Failed to add product to cart.");
        }
    }

    private void NavigateToProductDetail(Guid productId)
    {
        NavigationManager.NavigateTo($"/productdetail/{productId}");
    }

}
