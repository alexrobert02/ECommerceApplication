@page "/productoverview"
@using ECommerceApplication.App.Contracts
@using ECommerceApplication.App.ViewModels


<div class="products-content-container">
    @if (Products == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="product-container">
            @foreach (var prod in Products)
            {
                <div class="product-card" @onclick="() => NavigateToProductDetail(prod.ProductId)">
                    <img src="@prod.ImageUrl" alt="@prod.ProductName" class="product-image" />
                    <div class="product-details">
                        <h4 class="product-name">@prod.ProductName</h4>
                        <p class="product-price">$@prod.Price</p>
                        <button class="add-to-cart-button" @onclick="() => AddToCart(prod)">
                            <span class="shopping-cart-icon">&#128722;</span>
                            Add to Cart
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>


@code {
    [Inject]
    public IProductDataService ProductDataService { get; set; }

    [Inject]
    public IOrderItemDataService OrderItemDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<ProductViewModel> Products { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Products = (await ProductDataService.GetProductAsync()).ToList();
    }

    private void AddToCart(ProductViewModel product)
    {
        OrderItemViewModel orderItem = new OrderItemViewModel
            {
                ProductId = product.ProductId,
                Quantity = 1,
                PricePerUnit = product.Price
            };

        AddOrderItemToCart(orderItem);
    }

    private async Task AddOrderItemToCart(OrderItemViewModel orderItem)
    {
        // Call the service to add the order item to the cart
        var response = await OrderItemDataService.CreateOrderItemAsync(orderItem);

        // Check if the operation was successful
        if (response.IsSuccess)
        {
            // Handle success - perhaps show a success message or perform any additional logic
            Console.WriteLine("Product added to cart successfully!");
        }
        else
        {
            // Handle failure - display an error message or perform any necessary actions
            Console.WriteLine($"Failed to add product to cart.");
        }
    }

    private void NavigateToProductDetail(Guid productId)
    {
        NavigationManager.NavigateTo($"/productdetail/{productId}");
    }
}
