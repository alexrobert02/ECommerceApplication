@page "/{shoppingCartId:guid}/createOrder"
@using ECommerceApplication.App.Contracts
@using ECommerceApplication.App.ViewModels
@using System.Text.Json
@inject IReviewDataService ReviewDataService

<meta name="viewport" content="width=device-width, initial-scale=1.0">


<h3>AddOrder</h3>

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public ITokenService TokenService { get; set; }
    [Inject]
    public IShoppingCartDataService ShoppingCartDataService { get; set; }
    [Inject]
    public IOrderItemDataService OrderItemDataService { get; set; }
    [Inject]
    public IProductDataService ProductDataService { get; set; }
    public List<ReviewViewModel> ProductReviews { get; set; }
    private bool reviewSubmitted = false;

    [Parameter]
    public Guid productId { get; set; }

    public string AddToCartMessage { get; set; }

    private OrderItemViewModel OrderItemViewModel { get; set; } = new OrderItemViewModel();

    private ProductViewModel Product { get; set; }
    private int userRating = 0;
    private string userReview = "";
    private Guid currentUserId;
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        AddToCartMessage = "";
        currentUserId = await TokenService.DecodeUserIdFromTokenAsync(await TokenService.GetTokenAsync());

        if (productId == Guid.Empty)
        {
            Console.WriteLine("ProductId not provided or invalid");
            return;
        }

        OrderItemViewModel.Quantity = 1;


        Console.WriteLine($"Attempting to retrieve product with ID: {productId}");

        try
        {
            Product = await ProductDataService.GetProductByIdAsync(productId);

            if (Product == null)
            {
                Console.WriteLine("Product not found or API response is null");
                // Handle the null response more gracefully, e.g., redirect the user or show an error message.
            }
            else
            {
                Console.WriteLine($"Product found: {@Product.ProductName}, {Product.Description}, {Product.ImageUrl}, {Product.Price}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving product: {ex.Message}");
        }
        Console.WriteLine($"Attempting to retrieve reviews for product with ID: {productId}");

        ProductReviews = await ReviewDataService.GetReviewByProductId(productId);
        Console.WriteLine($"Found {ProductReviews.Count} reviews for product with ID: {productId}");
        Console.WriteLine($"Reviews:{ProductReviews}");
    }
}
