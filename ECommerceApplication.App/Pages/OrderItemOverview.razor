@page "/orderitemoverview"
@using ECommerceApplication.App.Contracts
@using ECommerceApplication.App.ViewModels

<h3>OrderItemOverview</h3>

<br />

<p><input class="custom-checkbox" type="checkbox" id="includeHistory" @onchange="OnIncludeHistoryChanged" />   Include past events?</p>

@if (OrderItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Product Id</th>
                <th>Quantity</th>
                <th>Price per unit</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var ord in OrderItems)
            {
                <tr>
                    <td>@ord.ProductId </td>
                    <td>@ord.Quantity </td>
                    <td>@ord.PricePerUnit </td>

                </tr>
                <tr>
                    <td>
                        <table class="nested-table ms-auto me-auto">
                            @*  <thead>
                    <tr>
                    <th>Event name</th>
                    <th class="category-event-header">Event date</th>
                    <th class="category-event-header">Artist</th>
                    <th class="category-event-header">Price</th>
                    </tr>
                    </thead> *@
                            <tbody>
                                @*  @foreach (var ev in cat.Events)
                        {
                        <tr>
                        <td class="event-name">@ev.Name </td>
                        <td class="event-date">@ev.Date.ToShortDateString() </td>
                        <td class="event-artist">@ev.Artist</td>
                        <td class="event-price">@ev.Price</td>
                        </tr>
                        } *@
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    public IOrderItemDataService OrderItemDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<OrderItemViewModel> OrderItems { get; set; }
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        OrderItems = (await OrderItemDataService.GetOrderItemsAsync()).ToList();
    }

    private void OnIncludeHistoryChanged(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            NavigationManager.NavigateTo("/orderitemoverview?includeHistory=true");
        }
        else
        {
            NavigationManager.NavigateTo("/orderitemoverview");
        }
    }
}
