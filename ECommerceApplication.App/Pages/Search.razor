@page "/search"
@using ECommerceApplication.App.Contracts
@using ECommerceApplication.App.ViewModels
@using Microsoft.AspNetCore.Components.Web

<div class="products-content-container">
    <div class="result-count-card">
        @if(@SearchResults.Count == 1){
            <p class="result-count-text">@SearchResults.Count result for <span class="results-query-text">"@Query"</span></p>
        }
        else{
            <p class="result-count-text">@SearchResults.Count results for <span class="results-query-text">"@Query"</span></p>
        }
    </div>
    <div class="product-container">
        @foreach (var prod in SearchResults)
        {
            <div class="product-card" @onclick="() => NavigateToProductDetail(prod.ProductId)">
                <img src="@prod.ImageUrl" alt="@prod.ProductName" class="product-image" />
                <div class="product-details">
                    <h4 class="product-name">@prod.ProductName</h4>
                    <p class="product-price">$@prod.Price</p>
                    <button class="add-to-cart-button" @onclick="() => AddToCart(prod)" disabled="@prod.IsAddingToCart">
                        @if (prod.IsAddingToCart)
                        {
                            <span class="adding-to-cart-text">Adding...</span>
                        }
                        else
                        {
                            <svg class="shopping-cart-icon" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 15a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0h8m-8 0-1-4m9 4a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-9-4h10l2-7H3m2 7L3 4m0 0-.792-3H1" />
                            </svg>
                            <span>Add to Cart</span>
                        }
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Inject]
    public IProductDataService ProductDataService { get; set; }

    [Inject]
    public IOrderItemDataService OrderItemDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<ProductViewModel> SearchResults { get; set; }

    [Parameter]
    public string Query { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Query in OnInitializedAsync: {Query}");
        await LoadSearchResults();
    }

    protected override async Task OnParametersSetAsync()
    {
        Query = NavigationManager.Uri.Split('?').LastOrDefault()?.Split('=').LastOrDefault();
        Console.WriteLine($"Query in OnParametersSetAsync: {Query}");
        await LoadSearchResults();
    }

    private async Task LoadSearchResults()
    {
        Console.WriteLine($"Query: {Query}");

        if (string.IsNullOrEmpty(Query))
        {
            Console.WriteLine("Search query is null or empty. Returning empty results.");
            SearchResults = new List<ProductViewModel>();
            return;
        }

        try
        {
            SearchResults = (await ProductDataService.GetProductAsync())
                .Where(prod => prod.ProductName != null && prod.ProductName.Contains(Query, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in search operation: {ex.Message}");
            throw;
        }

        Console.WriteLine($"Search results count: {SearchResults.Count}");
    }


    private async Task AddToCart(ProductViewModel product)
    {
        product.IsAddingToCart = true;

        await Task.Delay(2000);

        OrderItemViewModel orderItem = new OrderItemViewModel
            {
                ProductId = product.ProductId,
                Quantity = 1,
                PricePerUnit = product.Price
            };

        await AddOrderItemToCart(orderItem);

        product.IsAddingToCart = false;
    }

    private async Task AddOrderItemToCart(OrderItemViewModel orderItem)
    {
        var response = await OrderItemDataService.CreateOrderItemAsync(orderItem);

        if (response.IsSuccess)
        {
            Console.WriteLine("Product added to cart successfully!");
        }
        else
        {
            Console.WriteLine($"Failed to add product to cart.");
        }
    }

    private void NavigateToProductDetail(Guid productId)
    {
        NavigationManager.NavigateTo($"/productdetail/{productId}");
    }

}
