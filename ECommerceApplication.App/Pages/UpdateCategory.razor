@page "/updatecategory"
@using ECommerceApplication.App.Contracts
@using ECommerceApplication.App.ViewModels
@inject ICategoryDataService categoryDataService

<h3>Update Category</h3>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label for="categoryId" class="form-label">Category ID</label>
                <InputSelect @bind-Value="@CategoryId" @bind-Value:after="SelectCategory" class="form-select" id="productCategory" placeholder="select a category">
                    <option value="" selected disabled>Select a category...</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="newCategoryName" class="form-label">New Category Name</label>
                <input type="text" disabled="@DisableCategoryFields()" class="form-control" @bind="Category.CategoryName" id="newCategoryName" />
            </div>

            <button class="btn btn-primary" @onclick="HandleUpdateCategory">Update Category</button>
            <p class="mt-3">@updateMessage</p>
        </div>
    </div>
</div>
@code {
    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }
    public List<CategoryViewModel> Categories { get; set; }
    private Guid? CategoryId;
    private CategoryViewModel Category { get; set; }
    private string newCategoryName;
    private string updateMessage = "";

    protected override async Task OnInitializedAsync()
    {
        Categories = (await CategoryDataService.GetCategoriesAsync()).ToList();
        CategoryId = null;
        Category = new CategoryViewModel();
    }

    private void SelectCategory()
    {
        if (CategoryId == null)
            return;
        Category = Categories.FirstOrDefault(c=> c.CategoryId == CategoryId);
    }

    private bool DisableCategoryFields()
    {
        return CategoryId == null || CategoryId == Guid.Empty;
    }



    private async Task HandleUpdateCategory()
    {
        if (Category == null || CategoryId == null || CategoryId == Guid.Empty)
        {
            updateMessage = "Please fill in both Category ID and New Category Name.";
            return;
        }
        try
        {
            var response = await categoryDataService.UpdateCategoryAsync(Category);

            if (response != null && response.IsSuccess)
            {
                updateMessage = "Category updated successfully!";
                // Handle success
            }
            else
            {
                updateMessage = "Failed to update category. Please try again.";
                // Handle failure
            }

        }
        catch (Exception ex)
        {
                updateMessage = $"Error occurred: {ex.Message}";
                // Handle exception
        }
        
    }
}
