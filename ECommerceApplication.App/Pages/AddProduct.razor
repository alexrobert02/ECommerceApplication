@page "/addproduct"
@using ECommerceApplication.App.Contracts
@using ECommerceApplication.App.ViewModels
@using System.Text.Json

@if (User != null && User.Role == "Company")
{
    <div class="d-flex justify-content-center align-items-center min-vh-100">
        <div class="card shadow-sm w-100" style="max-width: 600px;">
            <div class="card-header">
                <h3 class="mb-0">New Product</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@ProductViewModel" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3 row">
                        <label for="productName" class="col-sm-3 col-form-label">Product Name:</label>
                        <div class="col-sm-9">
                            <InputText id="productName" class="form-control" @bind-Value="@ProductViewModel.ProductName" placeholder="Enter product name" />
                            <ValidationMessage For="@(() => ProductViewModel.ProductName)" />
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label for="productPrice" class="col-sm-3 col-form-label">Price:</label>
                        <div class="col-sm-9">
                            <InputNumber id="productPrice" class="form-control" @bind-Value="@ProductViewModel.Price" placeholder="Enter price" />
                            <ValidationMessage For="@(() => ProductViewModel.Price)" />
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label for="productDescription" class="col-sm-3 col-form-label">Description:</label>
                        <div class="col-sm-9">
                            <InputText id="productDescription" class="form-control" @bind-Value="@ProductViewModel.Description" placeholder="Enter description" />
                            <ValidationMessage For="@(() => ProductViewModel.Description)" />
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label for="productImage" class="col-sm-3 col-form-label">Image:</label>
                        <div class="col-sm-9">
                            <InputFile id="productImage" class="form-control" OnChange="HandleSelectedFile" />
                            <ValidationMessage For="@(() => ProductViewModel.Photo)" />
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <label for="productCategory" class="col-sm-3 col-form-label">Category:</label>
                        <div class="col-sm-9">
                            <InputSelect @bind-Value="@ProductViewModel.StringCategoryId" class="form-select" id="productCategory">
                                <option value="">Select a category...</option>
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.CategoryId">@category.CategoryName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => ProductViewModel.StringCategoryId)" />
                        </div>
                    </div>

                    <div class="d-flex justify-content-start mt-4">
                        <button type="submit" class="btn btn-primary me-2">Save Product</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(Message))
                    {
                        <p class="text-info mt-3">@Message</p>
                    }
                </EditForm>
            </div>
        </div>
    </div>
}



@code {
    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public IProductDataService ProductDataService { get; set; }

    [Inject]
	public ITokenService TokenService { get; set; }

	[Inject]
	public IUserDataService UserDataService { get; set; }

	[Inject]
	public IPhotoDataService PhotoDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public UserViewModel User { get; set; }

    public ProductViewModel ProductViewModel { get; set; }

    public string Message { get; set; }

    public IBrowserFile selectedFile;

    public List<CategoryViewModel> Categories { get; set; }

    public UploadPhotoDto UploadPhotoDto { get; set; } = new UploadPhotoDto();

}

@functions{

    protected override async Task OnInitializedAsync()
    {
        Categories = (await CategoryDataService.GetCategoriesAsync()).ToList();
		var token = await TokenService.GetTokenAsync();
		var email = await TokenService.DecodeEmailFromTokenAsync(token);

		
		if (!string.IsNullOrEmpty(email))
		{
			User = await UserDataService.GetUserByEmailAsync(email);
		}

		ProductViewModel = new ProductViewModel();

    }

    private async Task HandleValidSubmit()
    {
	    try
        {

			

	        var token = await TokenService.GetTokenAsync();
	        Guid companyId = await TokenService.DecodeUserIdFromTokenAsync(token);
	        if (companyId == null || companyId == Guid.Empty)
	        {
		        throw new FormatException("Invalid Company ID");
	        }
	        
	        // Convert string to Guid for CategoryId
            if (Guid.TryParse(ProductViewModel.StringCategoryId, out Guid categoryIdGuid))
            {
                ProductViewModel.CategoryId = categoryIdGuid;
                ProductViewModel.CompanyId = companyId;
                ProductViewModel.ImageUrl = "ddd";

                var result = await ProductDataService.CreateProductAsync(ProductViewModel);
                
                UploadPhotoDto.OwnerId = result.Product.ProductId;
                UploadPhotoDto.Photo = ProductViewModel.Photo;


                Console.WriteLine("Upload photo: " + UploadPhotoDto.OwnerId);
                Console.WriteLine("Serialized: " + JsonSerializer.Serialize(UploadPhotoDto));

                UploadFile();

                //var photo = await PhotoDataService.UploadPhotoAsync(UploadPhotoDto);
                Console.WriteLine(result);

                if (result.Success)
                {
                    Message = "Product created successfully";
                    NavigationManager.NavigateTo("/productoverview");
                }
                else
                {
                    Message = result.Message;
                    if (result.ValidationsErrors.Count!= 0)  
                    {
                        Message += result.ValidationsErrors;
                    }
                }
            }
            else
            {
                throw new FormatException("Invalid Category ID format");
            }
        }
        catch (FormatException ex)
        {
            // Mesaj de eroare pentru conversia incorectă a GUID-ului
            Message = ex.Message;
        }
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("/productoverview");
    }

    private void HandleSelectedFile(InputFileChangeEventArgs e)
    {
	    var files = e.GetMultipleFiles();
	    if (files.Count > 0)
	    {
		    selectedFile = files[0];
	    }
		Console.WriteLine($"NUMBER OF FILES: {files.Count}" );
    }

    private async Task UploadFile()
    {
	    if (selectedFile == null)
	    {
		    return;
	    }

	    try
	    {
		    using var stream = selectedFile.OpenReadStream();



			var result = await PhotoDataService.UploadPhotoAsync(UploadPhotoDto.OwnerId, stream, "filename");

		    if (result.IsSuccess)
		    {
			    Message = "Image uploaded successfully.";
			    selectedFile = null;

			    
		    }
		    else
		    {
			    return;
		    }
	    }
	    catch (Exception ex)
	    {
		    return;
	    }

    }

}