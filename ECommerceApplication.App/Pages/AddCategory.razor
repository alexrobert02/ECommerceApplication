@page "/addcategory"
@using ECommerceApplication.App.Contracts
@using ECommerceApplication.App.ViewModels
<h3 style="text-align: center; margin-bottom: 20px;">New Category</h3>

<div class="container">
    <EditForm Model="@CategoryViewModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3 row">
            <label for="categoryname" class="col-sm-3 col-form-label">Category Name:</label>
            <div class="col-sm-5">
                <InputText id="categoryname" class="form-control" @bind-Value="@CategoryViewModel.CategoryName" placeholder="Enter category name"></InputText>
                <ValidationMessage For="@(() => CategoryViewModel.CategoryName)" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-3 offset-sm-3">
                <button type="submit" class="btn btn-primary" style="background-color: #0d6efd; border-color: #0d6efd;">Save Category</button>
            </div>
            <div class="col-sm-3">
                <button class="btn btn-secondary" @onclick="Cancel" style="background-color: #007bff; border-color: #007bff;">Cancel</button>
            </div>
        </div>
    </EditForm>
    <p style="margin-top: 10px; color: #e83e8c; font-weight: bold;">@Message</p>
</div>

@code {
    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public CategoryViewModel CategoryViewModel { get; set; } = new CategoryViewModel();

    public string Message { get; set; }

    private async Task HandleValidSubmit()
    {
        var result = await CategoryDataService.CreateCategoryAsync(CategoryViewModel);
        if (result.IsSuccess)
        {
            Message = "Category created successfully";
            NavigationManager.NavigateTo("/categoryoverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/categoryoverview");
    }
}